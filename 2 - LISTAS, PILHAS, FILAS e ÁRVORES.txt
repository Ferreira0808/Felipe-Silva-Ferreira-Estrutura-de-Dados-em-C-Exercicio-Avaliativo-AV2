#include <stdio.h>
#include <stdlib.h>

typedef struct Node {
    int data;
    struct Node* prox;
} Node;

typedef struct {
    Node* top;
} Stack;

typedef struct {
    Node* front;
    Node* rear;
} Queue;

typedef struct TreeNode {
    int data;
    struct TreeNode* left;
    struct TreeNode* right;
} TreeNode;

// Pilha
void push(Stack* s, int data);
int pop(Stack* s);
void printStack(Stack* s);
void clearStack(Stack* s);
void printTop(Stack* s);

// Fila
void enqueue(Queue* q, int data);
int dequeue(Queue* q);
void printQueue(Queue* q);
void clearQueue(Queue* q);
int getMaximum(Queue* q);
int getMinimum(Queue* q);

// Arvore
TreeNode* createNode(int data);
TreeNode* insertNode(TreeNode* raiz, int data);
int searchElement(TreeNode* raiz, int data);
void printRightLeftRoot(TreeNode* raiz);
int findMax(TreeNode* raiz);

//Pilha

void push(Stack* s, int data) {
    Node* novo = (Node*)malloc(sizeof(Node));
    novo->data = data;
    novo->prox = s->top;
    s->top = novo;
}

int pop(Stack* s) {
    if (s->top == NULL) {
    return -1; 
    }
    
    Node* temp = s->top;
    int data = temp->data;
    s->top = temp->prox;
    free(temp);
    
    return data;
}

void printStack(Stack* s) {
    Node* atual = s->top;
    
    while (atual != NULL) {
    printf("%d ", atual->data);
    atual = atual->prox;
    }
}

void clearStack(Stack* s) {
    Node* atual = s->top;
    
    while (atual != NULL) {
    Node* temp = atual;
    atual = atual->prox;
    free(temp);
    }
    
    s->top = NULL;
}

void printTop(Stack* s) {
    if (s->top == NULL) {
    printf("vazia.\n");
    } else {
    printf("Topo: %d\n", s->top->data);
    }
}

//Fila

void enqueue(Queue* q, int data) {
    Node* novo = (Node*)malloc(sizeof(Node));
    novo->data = data;
    novo->prox = NULL;
    
    if (q->rear == NULL) {
    q->front = novo;
    q->rear = novo;
    } else {
    q->rear->prox = novo;
    q->rear = novo;
    }
}

int dequeue(Queue* q) {
    if (q->front == NULL) {
    return -1;
    }
    
    Node* temp = q->front;
    int data = temp->data;
    q->front = temp->prox;
    
    if (q->front == NULL) {
    q->rear = NULL;
    }
    
    free(temp);
    return data;
}

void printQueue(Queue* q) {
    Node* atual = q->front;
    
    while (atual != NULL) {
    printf("%d ", atual->data);
    atual = atual->prox;
    }
}

void clearQueue(Queue* q) {
    Node* atual = q->front;
    
    while (atual != NULL) {
    Node* temp = atual;
    atual = atual->prox;
    free(temp);
    }
    
    q->front = NULL;
    q->rear = NULL;
}

int getMaximum(Queue* q) {
    int max = q->front->data;
    Node* atual = q->front->prox;
    
    while (atual != NULL) {
    if (atual->data > max) {
    max = atual->data;
    }
    atual = atual->prox;
    }
    
    return max;
}

int getMinimum(Queue* q) {
    int min = q->front->data;
    Node* atual = q->front->prox;
    
    while (atual != NULL) {
    if (atual->data < min) {
    min = atual->data;
    }
    atual = atual->prox;
    }
    
    return min;
}

//Arvore

TreeNode* createNode(int data) {
    TreeNode* novo = (TreeNode*)malloc(sizeof(TreeNode));
    novo->data = data;
    novo->left = NULL;
    novo->right = NULL;
    
    return novo;
}

TreeNode* insertNode(TreeNode* raiz, int data) {
    if (raiz == NULL) {
    return createNode(data);
    }
    
    if (data < raiz->data) {
    raiz->left = insertNode(raiz->left, data);
    } else if (data > raiz->data) {
    raiz->right = insertNode(raiz->right, data);
    }
    
    return raiz;
}

int searchElement(TreeNode* raiz, int data) {
    if (raiz == NULL) {
        return 0;
    }
    
    if (data == raiz->data) {
        return 1;
    } else if (data < raiz->data) {
        return searchElement(raiz->left, data);
    } else {
        return searchElement(raiz->right, data);
    }
}

void printRightLeftRoot(TreeNode* raiz) {
    if (raiz != NULL) {
    printRightLeftRoot(raiz->right);
    printf("%d ", raiz->data);
    printRightLeftRoot(raiz->left);
    }
}

int findMax(TreeNode* raiz) {
    if (raiz->right != NULL) {
    return findMax(raiz->right);
    } else {
    return raiz->data;
    }
}

int main() {
    int option;

    do {
        printf("\nOpções:\n");
        printf("1 = Pilha\n");
        printf("2 = Fila\n");
        printf("3 = Árvore\n");
        printf("0 = Sair\n");

        scanf("%d", &option);

        switch (option) {
            case 1: {
                Stack s;
                s.top = NULL;
                int s_option, data;

                do {
                    printf("\nPilha:\n");
                    printf("1 = Empilhar\n");
                    printf("2 = Desempilhar\n");
                    printf("3 = Imprimir\n");
                    printf("4 = Limpar\n");
                    printf("5 = Topo da Pilha\n");
                    printf("0 = Cancelar\n");

                    scanf("%d", &s_option);

                    switch (s_option) {
                        case 1:
                            printf("Digite o valor: ");
                            scanf("%d", &data);
                            push(&s, data);
                            break;
                        case 2:
                            if (s.top == NULL) {
                                printf("Vazia.\n");
                            } else {
                                data = pop(&s);
                                printf("Desempilhado: %d\n", data);
                            }
                            break;
                        case 3:
                            printf("Elementos: ");
                            printStack(&s);
                            printf("\n");
                            break;
                        case 4:
                            clearStack(&s);
                            printf("Limpesa comcluida.\n");
                            break;
                        case 5:
                            if (s.top == NULL) {
                                printf("vazia.\n");
                            } else {
                                printf("Topo: %d\n", s.top->data);
                            }
                            break;
                        case 0:
                            break;
                        default:
                            printf("Esta opção não existe.\n");
                            break;
                    }
                } while (s_option != 0);
                
                break;
            }
            case 2: {
                Queue q;
                q.front = NULL;
                q.rear = NULL;
                int q_option, data;

                do {
                    printf("\nFila:\n");
                    printf("1 = Enfileirar\n");
                    printf("2 = Desenfileirar\n");
                    printf("3 = Imprimir Fila\n");
                    printf("4 = Limpar Fila\n");
                    printf("5 = Maior elemento\n");
                    printf("6 = Menor elemento\n");
                    printf("0 = Cancelar\n");

                    scanf("%d", &q_option);

                    switch (q_option) {
                        case 1:
                            printf("Digite o valor: ");
                            scanf("%d", &data);
                            enqueue(&q, data);
                            break;
                        case 2:
                            if (q.front == NULL) {
                                printf("A fila está vazia.\n");
                            } else {
                                data = dequeue(&q);
                                printf("Desenfileirado: %d\n", data);
                            }
                            break;
                        case 3:
                            printf("Elementos da fila: ");
                            printQueue(&q);
                            printf("\n");
                            break;
                        case 4:
                            clearQueue(&q);
                            printf("Limpesa comcluida.\n");
                            break;
                        case 5:
                            if (q.front == NULL) {
                                printf("A fila está vazia.\n");
                            } else {
                                printf("Maior elemento: %d\n", getMaximum(&q));
                            }
                            break;
                        case 6:
                            if (q.front == NULL) {
                                printf("A fila está vazia.\n");
                            } else {
                                printf("Menor elemento: %d\n", getMinimum(&q));
                            }
                            break;
                        case 0:
                            break;
                        default:
                            printf("Opção inválida.\n");
                            break;
                    }
                } while (q_option != 0);
                
                break;
            }
            case 3: {
                TreeNode* root = NULL;
                int a_option, data, resultado;

                do {
                    printf("\nÁrvore:\n");
                    printf("1 = Inserir\n");
                    printf("2 = Buscar\n");
                    printf("3 = Imprimir\n");
                    printf("4 = Mostrar o maior elemento\n");
                    printf("0 = Cancelar\n");

                    scanf("%d", &a_option);

                    switch (a_option) {
                        case 1:
                            printf("Digite o valor a ser inserido: ");
                            scanf("%d", &data);
                            root = insertNode(root, data);
                            break;
                        case 2:
                            printf("Digite o valor a ser buscado: ");
                            scanf("%d", &data);
                            resultado = searchElement(root, data);
                            if (resultado) {
                                printf("Elemento encontrado:\n%d\n", data);
                            } else {
                                printf("Elemento não encontrado.\n", data);
                            }
                            break;
                        case 3:
                            printf("Elementos: ");
                            printRightLeftRoot(root);
                            printf("\n");
                            break;
                        case 4:
                            if (root == NULL) {
                                printf("Vazia.\n");
                            } else {
                                printf("Maior elemento: %d\n", findMax(root));
                            }
                            break;
                        case 0:
                            break;
                        default:
                            printf("Opção inválida.\n");
                            break;
                    }
                } while (a_option != 0);

                break;
            }
            case 0:
                printf("Encerrando o programa.\n");
                break;
            default:
                printf("Opção inválida.\n");
                break;
        }
    } while (option != 0);

    return 0;
}
